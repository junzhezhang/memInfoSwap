import csv
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as mpatch
from unit_functions import *
from random import shuffle
from scipy.stats import gaussian_kde

memLimit_list = [293601280, 304087040, 314572800, 325058560, 335544320, 346030080, 356515840, 367001600, 377487360, 387973120, 398458880, 408944640, 419430400, 429916160, 440401920, 450887680, 461373440, 471859200, 482344960, 492830720, 503316480, 513802240, 524288000, 534773760, 545259520, 555745280, 566231040, 576716800, 587202560, 597688320, 608174080, 618659840,629145600, 639631360, 650117120, 660602880, 671088640, 681574400, 692060160, 702545920]

# print memLimit_list[0:-2]

# one iteration is: 83.972352
# one iteration is: 81.452288
# one iteration is: 79.288576
itr_duration_ms = (83.972352+81.452288+79.288576)/3
print itr_duration_ms
overhead_pri=[13934524.974400029, 12952277.294400021, 11243865.54400003, 9143643.392000034, 8860200.601600021, 9465590.11360003, 9424858.363200024, 8409771.003200024, 6390697.420800015, 4857769.420800015, 5882511.252800018, 5130611.502400011, 4629288.392000005, 3252567.752000004, 2460551.1120000035, 518305.2800000012, 2119559.1120000035, 2119559.1120000035, 2119559.1120000035, 1684359.1120000035, 1684359.1120000035, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
overhead_dto=[12090581.960000038, 12104438.625600025, 9188344.47360003, 11464001.224000037, 10117751.44480002, 9790015.739200026, 7431057.612800017, 7212588.334400013, 7087113.723200023, 5035745.126400009, 4237271.296000004, 4600300.4880000055, 2802877.030400008, 2515361.280000001, 1619361.2800000012, 806049.2800000012, 1283766.4720000029, 0, 0, 0, 0, 1201125.8320000023, 0, 0, 1201125.8320000023, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
overhead_dt=[12090581.960000038, 12104438.625600025, 9188344.47360003, 11464001.224000037, 10117751.44480002, 9790015.739200026, 7431057.612800017, 7212588.334400013, 7087113.723200023, 5035745.126400009, 4237271.296000004, 4600300.4880000055, 2802877.030400008, 2515361.280000001, 1619361.2800000012, 806049.2800000012, 1283766.4720000029, 0, 0, 0, 0, 1201125.8320000023, 0, 0, 1201125.8320000023, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
overhead_wdto=[10889456.128000036, 12104438.625600025, 9188344.47360003, 11464001.224000037, 10117751.44480002, 9790015.739200026, 7431057.612800017, 6011462.502400011, 7087113.723200023, 6236870.958400011, 5438397.128000006, 4895403.208000004, 2181053.030400008, 2155425.280000001, 1259425.2800000012, 446113.2800000012, 2538908.304000005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
overhead_pri_net=[13934524.974400029, 12952277.294400021, 11243865.54400003, 9143643.392000034, 8860200.601600021, 9465590.11360003, 9424858.363200024, 8409771.003200024, 6390697.420800015, 4857769.420800015, 5882511.252800018, 5130611.502400011, 4629288.392000005, 3252567.752000004, 2460551.1120000035, 518305.2800000012, 2119559.1120000035, 2119559.1120000035, 2119559.1120000035, 1684359.1120000035, 1684359.1120000035, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
overhead_sub_wdto=[12090581.960000038, 12104438.625600025, 9188344.47360003, 11464001.224000037, 10117751.44480002, 9790015.739200026, 7431057.612800017, 7212588.334400013, 7087113.723200023, 5035745.126400009, 4237271.296000004, 3399174.656000003, 2802877.030400008, 2515361.280000001, 1619361.2800000012, 806049.2800000012, 82640.6400000006, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

bo_list_raw = ['-10.889456128000036', '-12.104438625600025', '-9.18834447360003', '-9.143643392000035', '-8.86020060160002', '-9.465590113600031', '-7.431057612800017', '-6.011462502400011', '-6.390697420800016', '-4.8577694208000155', '-4.237271296000004', '-3.399174656000003', '-2.1810530304000078', '-2.155425280000001', '-1.2594252800000012', '-0.44611328000000117', '-0.0826406400000006', '0.0', '0.0', '0.0', '0.0', '0.0', '0.0', '0.0', '0.0', '0.0', '0.0', '0.0', '0.0', '0.0', '0.0', '0.0', '0.0', '0.0', '0.0', '0.0', '0.0', '0.0', '0.0', '0.0']
bo_list_ms =[]
for itm in bo_list_raw:

  bo_list_ms.append(float(itm)*(-1))

# print bo_list_ms
overhead_pri_net = [x/(1000000*itr_duration_ms) for x in overhead_pri_net]
overhead_pri_net = overhead_pri_net[0:-2]
overhead_dt = [x/(1000000*itr_duration_ms) for x in overhead_dt]
overhead_dt = overhead_dt[0:-2]
overhead_wdto = [x/(1000000*itr_duration_ms) for x in overhead_wdto]
overhead_wdto = overhead_wdto[0:-2]
overhead_sub_wdto = [x/(1000000*itr_duration_ms) for x in overhead_sub_wdto]
overhead_sub_wdto = overhead_sub_wdto[0:-2]
overhead_bo = [x/itr_duration_ms for x in bo_list_ms]
overhead_bo = overhead_bo[0:-2]
memLimit_list = [x>>20 for x in memLimit_list]
memLimit_list = memLimit_list[0:-2]

fig, ax = plt.subplots()
ax.plot(memLimit_list, overhead_pri_net, 'm--', label='area of absence (AOA)')
ax.plot(memLimit_list, overhead_dt, 'b:', label='duration of absence (DOA)')
ax.plot(memLimit_list, overhead_wdto, 'y--', label='weighted DOA')
ax.plot(memLimit_list, overhead_sub_wdto, 'g--', label='submodular weighted DOA')
ax.plot(memLimit_list, overhead_bo, 'k--', label='Bayesian Optimization')

plt.xlabel('memory usage in MB',fontsize =16)
plt.ylabel('% overhead as of one iteration',fontsize =16)

#ax.plot([400<<20], [205000], 'c--', label='overhead_r_idx')
legend = ax.legend(loc='upper right', shadow=True, fontsize='large')
# Put a nicer background color on the legend.
legend.get_frame().set_facecolor('#00FFCC')

plt.show()

